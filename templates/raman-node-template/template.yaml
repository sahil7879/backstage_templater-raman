apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: raman-node-template
  title: raman Node Project
  description: Scaffold a Node.js service with optional features
spec:
  owner: platform-team
  type: service

  parameters:
    - title: Project Info
      required:
        - name
        - owner
      properties:
        name:
          type: string
          title: Project name
          description: Unique name for your service

        owner:
          type: string
          title: Owner
          description: Team or person responsible

        language:
          type: string
          title: Programming Language
          description: Choose your tech stack
          enum:
            - nodejs
            - python
            - golang
            - java
          default: nodejs

        includeDockerfile:
          type: boolean
          title: Include Dockerfile?
          description: Scaffold with a Dockerfile
          default: true

        features:
          type: array
          title: Optional Features
          description: Select features to scaffold
          items:
            type: string
            enum:
              - GitHub Actions CI
              - Helm Chart
              - Swagger/OpenAPI

  steps:
    - id: fetch-base
      name: Fetch Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          owner: ${{ parameters.owner }}
          language: ${{ parameters.language }}
          includeDockerfile: ${{ parameters.includeDockerfile }}
          features: ${{ parameters.features }}
    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'Scaffolded Node.js project'
        repoUrl: 'github.com?sahil7879/${{ parameters.name }}'
        defaultBranch: main
        protectDefaultBranch: false
        requireCodeOwnerReviews: false

    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['fetch-base'].output.repoContentsUrl }}
        catalogInfoPath: ./catalog-info.yaml

  output:
    links:
      - title: Open in Catalog
        url: ${{ steps.register.output.entityRef | parseEntityRef | entityUrl }}

